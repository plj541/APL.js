var _LIB_ = {}
_LIB_["Dates"] = "get_help← { 1↓ \"\nDates verbs:\n   day          year month day; return weekday\n   days         year; return 1st day of each month\n   month        year month; return a calendar for that month\n   year         year; return a calendar\"\n}\n \nDay← {\n ⍝ ⍵ is (year, month, day) return day of the week\n now←12⊥ 2↑ ⍵\n now≤ 12⊥ 1752 9 : ↗'Before adoption of Gregorian calendar'\n ∆← ⌈1.75× ⌊(⍵← (0 1 + 0 12 ⊤¯3+now), ⍵[2])[0]÷ 100\n 7| ⍵[2]+ now+ (⌊¯0.2+ 2.6× ⍵[1])+ (⌊(now←100| ⍵[0]) ÷4)- ∆\n}\n\nday← {\n ⍝ ⍵ is (year, month, day) return weekday\n (⊃('Sun' 'Mon' 'Tues' 'Wednes' 'Thurs' 'Fri' 'Satur')[Day ⍵]), 'day'\n}\n\ndays← {\n ⍝ ⍵ is (year) return 1st day of each month\n 3 4⍴ day ¨ (⊂⍵ 0 1)+(⊂0 1 0)×1+⍳12\n}\n\nmonth← {\n ⍝ ⍵ is (year, month) return a calendar for that month\n ⍵← (⍵- 0 1), Day ⍵, 1\n ∆← (31 28 31 30 31 30 31 31 30 31 30 31)[⍵[1]]\n ∆← 1+ ⍳∆+ (⍵[1]= 1)∧ 0= 4| ⍵[0]\n ∆← 42↑ (⍵[2]⍴ 0), ∆\n ∆[(∆=0)/⍳⍴∆]← ' '\n ⍵←(12 3⍴ 'JanFebMarAprMayJunJulAugSepOctNovDec')[⍵[1];]\n ∆←(20↑ ¯12↑⍵)⍪ ⍕6 7⍴∆\n}\n\nyear← {\n ⍝ ⍵ is (year) return a calendar\n 3 4⍴ month¨ ⍵,¨ 1+ ⍳12\n}\n"
_LIB_["Examples"] = "get_help← { 1↓ \"\nExamples nouns and verbs.  Most are from,   http://ngn.github.io/apl/web/\nSeveral of the following nouns call a similar named verb. \n   Ackermann    returns a 4 by 5 table\n   Life         shows the first five generations of a Glider\n   Primes       provides the primes below 100\n   Rule30       see https://en.wikipedia.org/wiki/Rule_30\n   Queens       solves the n-queens problem\n   Sierpinski   returns a rank 5 triangle\n   QuoteQuad    demonstrates simple user prompting\"\n}\n\nackermann← {\n ⍝ a classic recursive function\n here← ∆← 1\n ⍺ ({here← 0 {⍺} ∆← ⍵+ 1} ⍣ (0= ⍺)) ⍵\n ⍺ ({here← 0 {⍺} ∆← (⍺- 1) ackermann 1} ⍣ (here∧ 0= ⍵)) ⍵\n ⍺ ({∆← (⍺- 1) ackermann ⍺ ackermann ⍵- 1} ⍣ here) ⍵\n ∆\n}\n\nget_Ackermann← {\n (⍳4) ∘. ackermann ⍳5\n}\n\nlife← {\n ⍝ Place the creature on a larger board, near the center\n board← ¯2⊖ ¯2⌽ (4+ ⍴⍺)↑ ⍺\n ⍝ Move from one generation to the next\n nextGen← {⊃1 ⍵ ∨.∧ 3 4 = +/ +⌿ 1 0 ¯1 ∘.⊖ 1 0 ¯1 ⌽¨ ⊂⍵}\n ⍝ Format the n-th generation as a character matrix\n {' #'[(nextGen⍣ ⍵) board]}¨ ⍵\n}\n\nget_Life← {\n ⍝ Conway's Game of Life.  This was inspired by:   http://www.youtube.com/watch?v=a9xAKttWgP4\n creature← 3 3⍴ (\n   0 1 1\n   1 1 0\n   0 1 0 )  ⍝ Original creature from demo\n creature← 3 3⍴ (\n   0 1 0\n   1 0 0\n   1 1 1 )  ⍝ Glider\n ⍝ Show first five generations\n creature life ⍳5\n}\n\nget_Primes← {\n ⍝ Look for Primes\n (1= +⌿ 0= ∘.∣⍨ ints)/ ints← 2↓ ⍳100\n}\n\nget_Rule30← {\n ⍝ See https://en.wikipedia.org/wiki/Rule_30\n rule← 30\n ruleSet← ⌽(8/ 2)⊤ rule\n n← 39 ⍝ number of rows to compute\n row← (3⍴ n, 1)/ 0 1 0\n table← (0, ⍴row)⍴ 0\n {\n  table← table⍪ row\n  row← ruleSet[(1⌽ row)+ (2× row)+ 4× ¯1⌽ row]\n }¨ ⍳n\n ' #'[table]\n}\n\nqueens←{                     ⍝ The N-queens problem\n              ⍝ Adapted from:  http://dfns.dyalog.com/c_queens.htm\n search← {                   ⍝ Search for all solutions.\n  (⊂⍬)∊⍵:0⍴⊂⍬                ⍝ stitched: abandon this branch.\n  0=⍴⍵:rmdups ⍺              ⍝ all done: solution!\n  (hd tl)←(↑⍵)(1↓⍵)          ⍝ head 'n tail of remaining ranks.\n  next←⍺∘,¨hd                ⍝ possible next steps.\n  rems←hd free¨⊂tl           ⍝ unchecked squares.\n  ⊃,/next ∇¨rems             ⍝ ... in following ranks.\n }\n\n cvex← (1+⍳⍵)×⊂¯1 0 1        ⍝ Checking vectors.\n\n free← {⍵~¨⍺+(⍴⍵)↑cvex}      ⍝ Unchecked squares.\n\n rmdups← {                   ⍝ Ignore duplicate solution.\n  rots←{{⍒⍵}\\4/⊂⍵}           ⍝ 4 rotations.\n  refs←{{⍋⍵}\\2/⊂⍵}           ⍝ 2 reflections.\n  best←{(↑⍋⊃⍵)⊃⍵}            ⍝ best (=lowest) solution.\n  all8←,⊃refs¨rots ⍵         ⍝ all 8 orientations.\n  (⍵≡best all8)⊃⍬(,⊂⍵)       ⍝ ignore if not best.\n }\n\n fmt← {                      ⍝ Format solution.\n  chars←'·⍟'[(⊃⍵)∘.=⍳⍺]      ⍝ char array of placed queens.\n  expd←1↓,⊃⍺⍴⊂0 1            ⍝ expansion mask.\n  ⊃¨⊂⍭{1 2}expd\\chars        ⍝ vector of char matrices.\n }\n\n squares←(⊂⍳⌈⍵÷2),1↓⍵⍴⊂⍳⍵    ⍝ initial squares\n ⍵ fmt ⍬ search squares      ⍝ all distinct solutions.\n}\n\nget_Queens← {\n queens 5\n}\n\nsierpinski← {\n ⍝ Sierpinski's triangle is a recursively defined figure.\n f ← {(⍵, (⍴⍵)⍴ 0)⍪ ⍵, ⍵}\n ' #'[(f⍣ ⍵) 1 1⍴ 1]\n}\n\nget_Sierpinski← {\n ⍝  Rank 0 is a one-by-one non-blank matrix.\n ⍝  If S is the triangle of rank n, then rank n+ 1 would be:\n ⍝     S 0\n ⍝     S S\n ⍝  Where \"0\" is an all-blank matrix same size as S.\n sierpinski 5\n}\n\nget_QuoteQuad← {\n ⎕← 'Any output other than ⍞ removes any previously set prompt'\n ans←  ⎕\n ⍞← 'My own prompt [', ans, ']:'\n ans← ⎕\n ⍞← 'Another prompt:' , (⎕UCS 10), 'initial [', ans, ']'\n ans← ⎕ \n}\n"
_LIB_["Host"] = "get_help← { 1↓ \"\nHost nouns and verbs:\n   TS           noun, provides a time stamp ⎕TS\n   Time         verb, you modify the comment to time solutions   \n   Mail         verb, 'message' Mail 'your@home.com' 'regarding'\n   Save         verb, downloads a workspace, formatted for )fetch\n   Backup       verb, downloads all your local browser storage\"\n}\n\nget_TS← {\n ⍝ TS is a value that returns ⎕TS\n ⍵← «(new Date()).toISOString()»\n ⍎'0123456789 '['0123456789'⍳ ⍵]\n}\n\nTime← {\n myBef← «+new Date»\n ⍝ ⍺ (function to time) ⍵\n myAft← «+new Date»\n myAft- myBef\n}\n\nMail← {\n 2≠ ≡⍵ : ↗'DOMAIN ERROR'\n ⍵← ⍵, ⊂''\n ⍝      ⍵← 'you@a.com' 'Regarding' ['cc=them@b.org [&bcc=her@c.net]']\n «sendMail(_w.data[0], _w.data[1], _w.data[2], _a)»\n ⍝      ⍺← 'Your message'\n}\n\nSave← {\n 0 1 Save ⍵\n;\n (apl jsa)← ⍺ ⋄ ∆← ⍬\n file← «storeGet(\"Code \" + _w.toSimpleString()).trim()»\n 0= ≢file : ↗'Nothing to save:' ⍵\n ⍝ Download a version for )edit\n file {apl : ∆← ⍺ {«fileDownload(_w.toSimpleString(), _a.toSimpleString())»} ⍵, '.apl'} ⍵\n ~jsa : ∆ ⍬\n file← 'jsLoad(\"Code \", \"', ⍵, '\", ', (JS file), ')'\n ⍝ Download a version for )fetch\n ∆ (file {«fileDownload(_w.toSimpleString(), _a.toSimpleString())»} ⍵, '.jsa')\n}\n\nReplaces←{\n ∆← ⍺\n {∆← ∆ ⎕replace ⍵ ⋄ 0} ¨ ⍵\n ∆\n}\n\nJS← {\n ⍝ Convert into something Javascript can load\n ∆← ⍵ Replaces ('\\\\' '\\\\') ((⎕UCS 10) '\\n') ('\"' '\\\"')\n '\"', ∆, '\\n\"'\n}\n\nget_Backup← {\n ∆← «storeLib(\"\")»\n ∆← ⍴{«storeGet(_w.toSimpleString())» {«fileDownload(_w.toSimpleString(), _a.toSimpleString())»} ⍵, '.apl'}¨ ∆\n 'Downloaded' ∆ 'files'\n}\n\n'' ⍝ Fini\n"
_LIB_["Html"] = "get_help← { 1↓ \"\nHtml nouns and verbs:\n   TS           noun, provides a time stamp (⎕TS)\n   LF           noun, is control character ⎕UCS 10\n   TAB          noun, is control character ⎕UCS 9\n   BR           noun, is HTML line break <br>\n   MT           noun, is an empty value\n\n   Button       verb, defines an HTML button\n   Text         verb, defines an HTML text or textarea\n   Check        verb, defines an HTML checkbox\n   List         verb, defines an HTML listbox\n   Debug        noun, defines an HTML button that invokes #Debug dialog\n   Table        verb, transforms a matrix into an HTML table\n\n   Values       verb, to get/put value property from fields with ID\n   Checks       verb, to get/put checked property from fields with ID\n   Defines      verb, to put innerHTML property of field with ID\n\n   Field        verb, to get/put a property of a field in an event\n   Event        verb, to get/put an event property in an event\n\n   Run          verb, to display HTML, or debug an application\n\n   xml          verb, to load an XML document\n   xmlValue     verb, path to a node and decode its Value\n   xmlAttr      verb, path to a node and provide its Attributes\n   xmlElement   verb, to create an XML element\"\n}\n\nget_TS← {\n ⍝ TS returns ⎕TS\n ⍵← «(new Date()).toISOString()»\n ⍎'0123456789 '['0123456789'⍳ ⍵]\n}\n\nHandle← {\n ⍝ 'whoCalled' Handle 'myField' 'multiple≠⋄width=27⋄onclick:goSave'\n 0= ⍴⍵← ,⍵ : '' ⋄ 2< ≡⍵ : ↗'DOMAIN ERROR:  ', ⍺\n ⍵← {2= ≡⍵ : ⍵ ⋄ (∨/':=≠'∊ ⍵)⌽ ⍵ ''} ⍵\n 2≠ ⍴⍵ : ↗'LENGTH ERROR:  ', ⍺\n (∆ ⍵)← ⍵ ⋄ ∆← {0= ⍴⍵ : '' ⋄ 'id=\"', ∆, '\"'} ∆\n 0= ⍴⍵ : ∆\n ⍵← ⍵ ⎕split '⋄'\n ∆, ∊(⊂⍺) {\n  2= ⍴myParm← ⍵ ⎕split '≠' : ' ', myParm[0]                       ⍝ ≠, Parm has no value\n  2= ⍴myParm← ⍵ ⎕split '=' : ' ', myParm[0], '=\"', myParm[1], '\"' ⍝ =, Quote normal HTML value\n  2≠ ⍴myParm← ⍵ ⎕split ':' : ↗'DOMAIN ERROR:  ', ⍺ \n  ' ', myParm[0], '=\"onEvent(this, event, ''', myParm[1], ''')\"'  ⍝ :, Call APL, with field and event\n }¨ ⍵\n}\n\nLF← ⎕UCS 10 ⋄ TAB← ⎕UCS 9\nBR← ⊂'<br>' ⋄ MT← ⊂''\nSpace← {⍵,⍨ ⊂'&nbsp;'⍴⍨ 6× ⍺}\n\nButton← {\n '' Button ⍵\n;\n ∆← '<input type=\"button\" ', 'Button' Handle ⍺\n ⊂∆, ' value=\"', ⍵, '\">'\n}\n\nget_Debug← {\n ⊂'<input type=\"button\" onclick=\"pageDebug()\" value=\"#Debug\">'\n}\n\nText← {\n '' Text ⍵\n;\n ∆← 'Text' Handle ⍺\n 1= ≢⍵ : ⊂'<input type=\"Text\" ', ∆, ' size=\"', (,⍕⍵), '\" />'\n (⍺ ⍵)← {,⍕⍵}¨ ⍵\n ⊂'<textarea ', ∆, ' rows=\"', ⍺, '\" cols=\"', ⍵, '\"></textarea>'\n}\n\nCheck← {\n '' Check ⍵\n;\n ∆← '<input type=\"checkbox\" ', 'Check' Handle ⍺\n (⍺ ⍵)← ⍵ ⋄ ⊂∆, ' value=\"', ⍺, '\">', ⍵\n}\n\nList← {\n '' List ⍵\n;\n ∆← '<select ', '>',⍨ 'List' Handle ⍺\n ⊂∊∆ (Options ⍵) '</select>'\n}\n\nOptions← {\n ⊂∊{(∆ ⍵)← ⍵ ⋄ '<option value=\"', ∆, '\">', ⍵, '</option>'}¨ ⍵\n}\n\nget_Arguments← {\n {(2,⍨ .5× ⍴⍵)⍴ ⍵} «Arguments()»\n}\n\nColumns← {\n (⍺,⍨ ⌈⍺÷⍨ ⍴⍵)⍴ ⍵, ⍺⍴ ⊂''\n}\n\nPairs← {\n {2≤ ≡⍵ : ⍵ ⋄ 2⍴ ⊂,⍕⍵}¨ ⍵\n}\n\nTable← {\n '0' Table ⍵\n;\n ⍵← {1= ≢⍵← ⍕⍵ : ,⍵ ⋄ ,⍵, (4,⍨ ≢⍵)⍴ '<br>'}¨ ⍵\n ⍵← {'<td>', ⍵, '</td>'}¨ ⍵\n ⍵← (⊂'<tr>'), ⍵, ⊂'</tr>'\n ⊂('<table border=\"', ⍺, '\">'), (∊⍵), '</table>'\n}\n\nValues← {\n «fieldValues(_w.toSimpleString())»\n;\n «fieldValues(_w.toSimpleString(), _a)»\n}\n\nChecks← {\n «fieldChecks(_w.toSimpleString())»\n;\n «fieldChecks(_w.toSimpleString(), _a)»\n}\n\nDefines← {\n «fieldDefines(_w.toSimpleString())»\n;\n «fieldDefines(_w.toSimpleString(), _a)»\n}\n\nField← {\n ⍎'«thisField.', ⍵, '»'\n;\n ⍺← {' '∊2↑1⍴ ⍵ : '\"', ⍵, '\"' ⋄ ,⍕⍵} ⍺\n ⍎'«thisField.', ⍵, ' = ', ⍺, '»'\n}\n\nEvent← {\n ⍎'«thisEvent.', ⍵, '»'\n;\n ⍺← {' '∊2↑1⍴ ⍵ : '\"', ⍵, '\"' ⋄ ,⍕⍵} ⍺\n ⍎'«thisEvent.', ⍵, ' = ', ⍺, '»'\n}\n\nRun← {\n ⍝ If ⍵ is HTML, display it\n '<'= ↑⍵← ∊⍵ : 'Display' Run ⍵\n ⍝ Page is a workspace to run, calling onDisplay then onLoad \n '<'≠ ↑⍵← ∊⍵ : ⎕link 'Run.html?Local&Page=', ⍵\n ⍝ Remove Local when you publish a link\n; \n ⍵ ⎕file ⍺\n ⎕link 'Run.html?File=', ⍺\n}\n\nxmlElement← {\n ⍺ {«xmlElement(_a, _w)»} ⍵\n}\n\nxml← {\n «xmlParse(_w)»\n}\n\nxmlValue← {\n «xmlValue(_w)»\n}\n\nxmlAttr← {\n ∆← «xmlAttr(_w)»\n ∆← (2,⍨ .5×⍴∆)⍴ ∆\n}\n\n'' ⍝ Fini\n"
_LIB_["Numbers"] = "get_help← { 1↓ \"\nNumbers verbs:\n   toEnglish    converts an integer to words \n   fromRoman    converts a positive integer to Roman Numerals\n   toRoman      converts from Roman Numerals to a number\"\n}\n\nDigits← {\n ⍝ Expand three digits for toEnglish\n Number← 28 9⍴ '_________one______two______three____four_____five_____six______seven____eight____nine_____ten______eleven___twelve___thirteen_fourteen_fifteen__sixteen__seventeeneighteen_ninteen__twenty__-thirty__-forty___-fifty___-sixty___-seventy_-eighty__-ninety__-'\n ∆← ''\n ({⍵← 0 100⊤ ⍵\n   ({∆← Number[⍵[0];], ' hundred '\n    } ⍣ (⍵[0]≠ 0)) ⍵\n   ⍵← ⍵[1]\n   ({∆← ∆, ,(Number[18 0+ 10 10⊤ ⍵;])[;(⍳8), (0≠ 10⊤ ⍵)⍴ 8]\n    } ⍣ (⍵> 19)) ⍵\n   ({∆← ∆, Number[⍵;]\n    } ⍣ (⍵< 20)) ⍵\n  } ⍣ (⍵≠ 0)) ⍵\n ∆~ '_'\n}\n\ntoEnglish← {\n ⍝ Convert a number into English\n Number← 5 9⍴ 'trillion_billion__million__thousand__________'\n ∆←  ({∆← 'zero'} ⍣ (⍵= 0)) ⍵←''⍴ ⍵\n ({∆← (⍵< 0)/ 'negative '\n   ⍵← (5⍴ 1000)⊤ |⍵\n   now← (⍵≠ 0)⍳ 1\n   {∆← ∆, (Digits ⍵) {⍺, (0≠ ⍴⍺)/ ⍵} ' ', Number[now;], ' '\n    now← now+ 1\n   } ¨ now↓ ⍵\n  } ⍣ (⍵≠ 0)) ⍵\n ∆~ '_'\n}\n\nfromRoman← {\n ⍝ Convert from Roman numerals\n ∆← ((14⍴1 5 10 50 100 500 1000), 5000 10000 50000 100000 500000 1000000)['ivxlcdmIVXLCDMⓋⓍⓁⒸⒹⓂ'⍳ ,⍵]  ⍝ NB. ()'s currently required\n ∆←∆ +.× ¯1+ 2× ∆≥ 1↓∆, 0\n}\n\ntoRoman← {\n ⍝ Convert a number to Roman numerals\n (⍵< 0)∨ ⍵> 3999 : 'domain error'\n ∆← 4 1 3 2 2 3 1 1 1 2 1 3 1 1 2 1 2 1 1 4 1 2\n ∆←∆/ 2 0 2 0 2 0 2 0 ¯1 2 ¯1 2 ¯1 0 2 ¯1 0 2 ¯1 0 ¯2 2\n ∆←,(10 4 ⍴∆)[(4⍴10)⊤⍵;]\n 'MDCLXVI'[(∆≠2)/∆+2×⌊0.25×⍳16] ⍝ ⓂⒹⒸⓁⓍⓋ\n}\n"
