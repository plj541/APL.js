jsLoad("Code ", "Turtle", "Load← {\n 0≠ ≢«document.getElementsByName(\"formTurtle\")[0].innerHTML» : ''\n «jsFetch(\"../Turtle/hsv.js\")»\n «jsFetch(\"../Turtle/pen.js\")»\n Reset ''\n 'Loading Turtle'\n}\n\nReset← {\n ∆← '<canvas id=\"canvasTurtle\"  height=\"500\" width=\"800\"\n  style=\"border:1px solid #c3c3c3;float:left;margin-right:20px;margin-bottom:15px\">\n  Your browser does not support the &lt;canvas&gt; element.</canvas>'\n ∆← {0= ≢⍵ : ∆ ⋄ ⍵} ⍵\n {«document.getElementsByName(\"formTurtle\")[0].innerHTML = _w.toSimpleString()»} ∆\n 'Clearing Turtle'\n}\n\nget_Example← {\n ⍝ https://github.com/davebalmer/turtlewax  No rework into APL as yet\n «function() {\n  // create a new pen object attached to our canvas tag\n  var p = new Pen(\"canvasTurtle\");\n\n  // add a custom function to draw a square\n  p.square = function(size) {\n  for (var i = 0; i < 4; i++)\n   this.go(size).turn(90);\n\n   // to be a good function, we want to allow chaining\n   return this;\n }\n\n // add custom \"spirograph\" function based on our new square function\n p.spiro = function() {\n  for (var i = 0; i < 36; i++)\n   this.square(50).turn(10);\n   return this;\n  }\n\n // an arrow function, for grins\n p.arrow = function() {\n  var p = this.pen;\n  this.pendown().turn(-150).go(20).back(20).turn(300);\n  this.go(20).back(20).turn(-150).close().stroke();\n  // restore our pen state\n  this.pen = p;\n  // again, support chaining because it's cool\n  return this;\n }\n\n // stupid canvas tricks\n //p.canvas.scale(5, 5);\n //p.canvas.translate(-600, -250);\n\n // make single pixel lines look prettier -- don't ask\n p.canvas.translate(.5, .5);\n\n p.jump(300, 250).fillstyle(\"#ff0\").pensize(0);\n p.ray = function(d, a) {\n  this.begin();\n  return this.origin().polar(d, 0).polar(d, a).polar(0, 0).close().draw();\n }\n\n for (var i = 0; i < 18; i++) {\n  // pen color change for a little pazazz\n  p.fillstyle(hsvtorgb(p.dir + 60, 1, .9));\n  p.ray(1000, 10).turn(20);\n }\n\n p.turn(10);\n for (var i = 0; i < 18; i++) {\n  // pen color change for a little pazazz\n  p.fillstyle(hsvtorgb(p.dir - 60, 1, .9));\n  p.ray(1000, 10).turn(20);\n }\n p.turn(-10);\n\n // draw a container box\n p.pensize(3).fillstyle(\"rgba(255, 255, 255, .8)\");\n p.jump(10, 10).right(780).down(480).left(780).up(480).close().draw();\n\n // yes, you could go directly to the canvas if you wanna, but it won't chain\n // p.fillstyle(\"#eee\").canvas.fillRect(10, 10, 790, 490);\n\n // draw a square\n p.pensize(1).fillstyle(\"#ff0\").jump(50, 300).square(100).draw();\n\n // draw a spirograph\n p.fillstyle().jump(300, 250).spiro().draw();\n\n // make a complex drawing using our functions\n p.jump(600, 250);\n for (var i = 0; i < 18; i++) {\n  // pen color change for a little pazazz\n  p.penstyle(hsvtorgb(p.dir, 1, .9));\n\n  // draw a spiro, then rotate a bit\n  p.penup().go(100).pendown().spiro().penup().back(100).turn(20).draw();\n }\n\n // draw some labels\n p.fillstyle(\"#999\").font(\"bold 15px Helvetica\").penup();\n p.jump(70, 150).text(\"A square\");\n p.jump(180, 110).text(\"A 'spirograph' made from squares\");\n p.jump(480, 50).text(\"A pattern made from 'spirographs'\");\n return \"Turtle Updated\"\n} ()» }\n\nLoad ''  ⍝ Fetch Turtle for further use\n")